// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Prisma Client Generator
// This tells Prisma to generate the TypeScript client
generator client {
  provider = "prisma-client-js"
}

// 2. Database Datasource
// This is your database connection configuration
datasource db {
  provider  = "postgresql"
  // This is the pooled connection string (for your app)
  url       = env("DATABASE_URL")
  // This is the direct connection string (for migrations)
  directUrl = env("DATABASE_DIRECT_URL")
}

// 3. NextAuth.js Authentication Models
// These models are REQUIRED by the @auth/prisma-adapter

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Link to the generation jobs
  GenerationJob GenerationJob[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 4. AutoForge Application Models
// This is the new model for tracking generation jobs

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

model GenerationJob {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status    JobStatus @default(PENDING)
  prompt    String    @db.Text

  // This will store the JSON plan from the LLM
  planJson  String?   @db.Text

  // This will store the final generated code, or error messages
  result    String?   @db.Text

  // Link to the user who created this job
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

