// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// 1. Datasource Configuration
// This is specifically configured for Vercel Postgres
// It uses connection pooling for the app (DATABASE_URL)
// and a direct connection for migrations (DATABASE_DIRECT_URL)
datasource db {
  provider = "postgresql"

  // This is for the main application client (uses pooling)
  url = env("DATABASE_URL")

  // This is for migrations (needs a direct connection)
  // Vercel/Neon does not support shadow databases, so we
  // remove the shadowDatabaseUrl line.
  directUrl = env("DATABASE_DIRECT_URL")
}


// ---------------------------------
// 2. AUTHENTICATION MODELS
// These are required by the NextAuth.js Prisma Adapter
// ---------------------------------

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // --- RELATIONS ---
  // Relates to the Account model for OAuth providers
  accounts Account[]
  // Relates to the Session model for database sessions
  sessions Session[]
  
  // --- YOUR CUSTOM MODELS WILL GO HERE ---
  // e.g., projects Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // --- RELATION ---
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- INDEXES ---
  // This ensures a user can only have one account per provider
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // --- RELATION ---
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // --- INDEXES ---
  // This ensures a token is unique
  @@unique([identifier, token])
}

